---
// src/components/MapSection.astro
import { accommodationsData, getAmenityIcon, MAPBOX_CONFIG } from '../data/accommodationData.js';
---

<!-- Mapbox GL JS CDN -->
<link href='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css' rel='stylesheet' />
<script src='https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js'></script>

<section class="map-section" id="mapa">
  <div class="main-container">
    <!-- Sidebar -->
    <div class="sidebar">
      <!-- Filter Tabs -->
      <div class="filter-tabs">
        <button class="filter-tab active" data-category="hoteles">
          <svg class="filter-tab-icon" viewBox="0 0 24 24" fill="none">
            <path d="M7 13c1.66 0 3-1.34 3-3S8.66 7 7 7s-3 1.34-3 3 1.34 3 3 3zm12-6h-8v7H9.5v-7h-8L2 19h20L20.5 7z" fill="currentColor"/>
            <rect x="6" y="9" width="2" height="2" fill="#000" opacity="0.3"/>
            <rect x="15" y="9" width="2" height="2" fill="#000" opacity="0.3"/>
            <rect x="6" y="12" width="2" height="2" fill="#000" opacity="0.3"/>
            <rect x="15" y="12" width="2" height="2" fill="#000" opacity="0.3"/>
          </svg>
          Hoteles
        </button>
        <button class="filter-tab" data-category="departamentos">
          <svg class="filter-tab-icon" viewBox="0 0 24 24" fill="none">
            <rect x="2" y="3" width="20" height="18" rx="1" fill="currentColor"/>
            <rect x="4" y="6" width="6" height="4" rx="0.5" fill="#000" opacity="0.2"/>
            <rect x="14" y="6" width="6" height="4" rx="0.5" fill="#000" opacity="0.2"/>
            <rect x="4" y="12" width="6" height="4" rx="0.5" fill="#000" opacity="0.2"/>
            <rect x="14" y="12" width="6" height="4" rx="0.5" fill="#000" opacity="0.2"/>
            <circle cx="12" cy="18" r="0.8" fill="#000" opacity="0.4"/>
            <rect x="11" y="16.5" width="2" height="1" fill="#000" opacity="0.4"/>
          </svg>
          Apartamentos
        </button>
        <button class="filter-tab" data-category="hostales">
          <svg class="filter-tab-icon" viewBox="0 0 24 24" fill="none">
            <path d="M12 3L2 12h3v8h6v-6h2v6h6v-8h3L12 3z" fill="currentColor"/>
            <rect x="9" y="14" width="2" height="2" rx="0.5" fill="#000" opacity="0.3"/>
            <rect x="13" y="14" width="2" height="2" rx="0.5" fill="#000" opacity="0.3"/>
            <rect x="9" y="17" width="6" height="1" fill="#000" opacity="0.2"/>
            <circle cx="7" cy="10" r="0.5" fill="#000" opacity="0.4"/>
            <circle cx="17" cy="10" r="0.5" fill="#000" opacity="0.4"/>
          </svg>
          Hostales
        </button>
      </div>

      <!-- Accommodation List -->
      <div class="accommodation-list" id="accommodation-list">
        <div class="loading">
          <div class="spinner"></div>
        </div>
      </div>
    </div>

    <!-- Map Container -->
    <div class="map-container">
      <!-- Search Bar -->
      <div class="search-bar">
        <input type="text" class="search-input" placeholder="Buscar ubicaci√≥n...">
        <button class="search-btn">Buscar</button>
      </div>

      <!-- Map Controls -->
      <div class="map-controls">
        <button class="map-control-btn" id="toggle-style">üó∫Ô∏è</button>
        <button class="map-control-btn" id="center-map">üìç</button>
      </div>

      <!-- Map -->
      <div id="map"></div>
    </div>
  </div>
</section>

<style>
  .map-section {
    min-height: 100vh;
    background: #000;
  }

  .main-container {
    display: flex;
    height: 100vh;
  }

  /* Sidebar */
  .sidebar {
    width: 420px;
    background: #111;
    border-right: 1px solid #333;
    overflow-y: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }
  
  .sidebar::-webkit-scrollbar {
    display: none;
  }

  /* Filter Tabs */
  .filter-tabs {
    display: flex;
    background: #1a1a1a;
    border-bottom: 1px solid #333;
  }

  .filter-tab {
    flex: 1;
    padding: 1rem;
    text-align: center;
    background: none;
    border: none;
    color: #888;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    position: relative;
  }

  .filter-tab.active {
    color: #0EA5E9;
    background: #222;
  }

  .filter-tab::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: #0EA5E9;
    transform: scaleX(0);
    transition: transform 0.3s ease;
  }

  .filter-tab.active::after {
    transform: scaleX(1);
  }

  .filter-tab-icon {
    width: 1.5rem;
    height: 1.5rem;
    margin-bottom: 0.3rem;
    display: block;
    margin-left: auto;
    margin-right: auto;
  }

  /* Accommodation Cards */
  .accommodation-list {
    padding: 1rem;
  }

  .accommodation-card {
    background: #1a1a1a;
    border-radius: 12px;
    margin-bottom: 1rem;
    overflow: hidden;
    border: 1px solid #333;
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
  }

  .accommodation-card:hover {
    border-color: #0EA5E9;
    transform: translateY(-3px);
    box-shadow: 0 10px 25px rgba(14, 165, 233, 0.2);
  }

  .accommodation-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.1), rgba(255, 107, 53, 0.05));
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 1;
    pointer-events: none;
  }

  .accommodation-card:hover::before {
    opacity: 1;
  }

  .card-image {
    width: 100%;
    height: 140px;
    object-fit: cover;
    display: block;
    border-radius: 12px 12px 0 0;
    background-color: #333;
  }

  /* ELIMINAMOS TODOS LOS ESTILOS CONFLICTIVOS ANTERIORES */

  /* ESTILOS SUPER ESPEC√çFICOS PARA CENTRADO PERFECTO - PRIORIDAD M√ÅXIMA */
  .accommodation-card .card-content-center {
    padding: 2rem 1.5rem !important;
    display: flex !important;
    flex-direction: column !important;
    align-items: center !important;
    justify-content: space-evenly !important;
    text-align: center !important;
    min-height: 280px !important;
    width: 100% !important;
    position: relative !important;
    z-index: 2 !important;
  }

  .accommodation-card .card-header-center {
    width: 100% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    margin: 0 !important;
    padding: 0 !important;
  }

  .accommodation-card .card-title-center {
    font-size: 1.4rem !important;
    font-weight: 700 !important;
    color: #fff !important;
    margin: 0 auto !important;
    text-align: center !important;
    line-height: 1.3 !important;
    max-width: 100% !important;
    display: block !important;
    word-wrap: break-word !important;
    text-shadow: 0 2px 4px rgba(0,0,0,0.4) !important;
  }

  .accommodation-card .card-amenities-icons-center {
    display: flex !important;
    gap: 1.2rem !important;
    justify-content: center !important;
    align-items: center !important;
    margin: 0 !important;
    flex-wrap: nowrap !important;
    width: 100% !important;
    overflow-x: auto !important;
    padding: 10px 0 !important;
    scrollbar-width: none !important;
    -ms-overflow-style: none !important;
  }

  .accommodation-card .card-amenities-icons-center::-webkit-scrollbar {
    display: none !important;
  }

  .accommodation-card .card-footer-center {
    width: 100% !important;
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    margin: 0 !important;
    padding: 0 !important;
  }

  /* BOT√ìN NARANJA SUPER ESPEC√çFICO - PRIORIDAD M√ÅXIMA */
  .accommodation-card .card-footer-center .reserve-btn-orange,
  .accommodation-card button.reserve-btn-orange,
  button.reserve-btn-orange {
    background: linear-gradient(145deg, #FF6B35 0%, #FF8A50 25%, #E55A2B 50%, #FF6B35 75%, #FF8A50 100%) !important;
    background-size: 200% 200% !important;
    color: white !important;
    border: none !important;
    padding: 16px 32px !important;
    border-radius: 50px !important;
    font-weight: 800 !important;
    font-size: 0.9rem !important;
    cursor: pointer !important;
    text-transform: uppercase !important;
    letter-spacing: 1.5px !important;
    box-shadow: 
      0 10px 30px rgba(255, 107, 53, 0.5),
      0 5px 15px rgba(255, 107, 53, 0.3),
      inset 0 2px 0 rgba(255,255,255,0.4),
      inset 0 -2px 0 rgba(0,0,0,0.1) !important;
    transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
    min-width: 160px !important;
    position: relative !important;
    overflow: hidden !important;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3) !important;
    border: 3px solid transparent !important;
    background-clip: padding-box !important;
    animation: pulse-glow 3s ease-in-out infinite alternate !important;
  }

  @keyframes pulse-glow {
    0% {
      box-shadow: 
        0 10px 30px rgba(255, 107, 53, 0.4),
        0 5px 15px rgba(255, 107, 53, 0.2),
        inset 0 2px 0 rgba(255,255,255,0.4);
    }
    100% {
      box-shadow: 
        0 15px 40px rgba(255, 107, 53, 0.6),
        0 8px 20px rgba(255, 107, 53, 0.4),
        inset 0 2px 0 rgba(255,255,255,0.5);
    }
  }

  .accommodation-card .reserve-btn-orange::before,
  button.reserve-btn-orange::before {
    content: '' !important;
    position: absolute !important;
    top: 0 !important;
    left: -100% !important;
    width: 100% !important;
    height: 100% !important;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.6), transparent) !important;
    transition: left 0.8s ease !important;
  }

  .accommodation-card .reserve-btn-orange:hover::before,
  button.reserve-btn-orange:hover::before {
    left: 100% !important;
  }

  .accommodation-card .reserve-btn-orange:hover,
  button.reserve-btn-orange:hover {
    background: linear-gradient(145deg, #E55A2B 0%, #FF6B35 25%, #FD79A8 50%, #E55A2B 75%, #FF6B35 100%) !important;
    background-size: 300% 300% !important;
    background-position: 50% 0% !important;
    transform: translateY(-6px) scale(1.08) !important;
    animation: none !important;
    box-shadow: 
      0 20px 50px rgba(255, 107, 53, 0.8),
      0 10px 25px rgba(255, 107, 53, 0.6),
      inset 0 3px 0 rgba(255,255,255,0.6),
      inset 0 -3px 0 rgba(0,0,0,0.2),
      0 0 0 4px rgba(255, 107, 53, 0.2) !important;
    text-shadow: 0 2px 8px rgba(0,0,0,0.4) !important;
  }

  .accommodation-card .reserve-btn-orange:active,
  button.reserve-btn-orange:active {
    transform: translateY(-3px) scale(1.05) !important;
    box-shadow: 
      0 12px 30px rgba(255, 107, 53, 0.7),
      0 6px 15px rgba(255, 107, 53, 0.5),
      inset 0 2px 0 rgba(255,255,255,0.5) !important;
    transition: all 0.1s ease !important;
  }

  .accommodation-card .reserve-btn-orange:focus,
  button.reserve-btn-orange:focus {
    outline: none !important;
    box-shadow: 
      0 0 0 4px rgba(255, 107, 53, 0.4), 
      0 15px 40px rgba(255, 107, 53, 0.6),
      inset 0 2px 0 rgba(255,255,255,0.4) !important;
  }

  /* ICONOS ESPEC√çFICOS PARA CENTRADO PERFECTO */
  .accommodation-card .card-amenities-icons-center .amenity-icon {
    position: relative !important;
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    cursor: pointer !important;
    transition: all 0.3s ease !important;
    padding: 8px !important;
    border-radius: 8px !important;
    flex-shrink: 0 !important;
  }

  .accommodation-card .card-amenities-icons-center .amenity-icon:hover {
    transform: scale(1.15) !important;
    background: rgba(255, 255, 255, 0.1) !important;
  }

  .accommodation-card .card-amenities-icons-center .amenity-icon svg {
    width: 32px !important;
    height: 32px !important;
    transition: all 0.3s ease !important;
    filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
  }

  .accommodation-card .card-amenities-icons-center .amenity-icon:hover svg {
    filter: drop-shadow(0 4px 8px rgba(255, 107, 53, 0.4)) !important;
  }

  /* Map Container */
  .map-container {
    flex: 1;
    position: relative;
  }

  #map {
    width: 100%;
    height: 100%;
  }

  /* Map Controls */
  .map-controls {
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 100;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .map-control-btn {
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    border: 1px solid #333;
    padding: 0.8rem;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .map-control-btn:hover {
    background: #0EA5E9;
    border-color: #0EA5E9;
  }

  /* Search Bar */
  .search-bar {
    position: absolute;
    top: 20px;
    left: 20px;
    z-index: 100;
    background: rgba(0, 0, 0, 0.9);
    padding: 1rem;
    border-radius: 12px;
    border: 1px solid #333;
    display: flex;
    gap: 1rem;
    align-items: center;
  }

  .search-input {
    background: #222;
    border: 1px solid #444;
    color: #fff;
    padding: 0.7rem 1rem;
    border-radius: 8px;
    font-size: 0.9rem;
    width: 200px;
  }

  .search-input::placeholder {
    color: #666;
  }

  .search-btn {
    background: #0EA5E9;
    color: #fff;
    border: none;
    padding: 0.7rem 1.2rem;
    border-radius: 8px;
    cursor: pointer;
    font-weight: bold;
    transition: background 0.3s ease;
  }

  .search-btn:hover {
    background: #0284c7;
  }

  /* Loading Animation */
  .loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    color: #666;
  }

  .spinner {
    width: 30px;
    height: 30px;
    border: 3px solid #333;
    border-top: 3px solid #0EA5E9;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Custom Mapbox Popup */
  :global(.mapboxgl-popup-content) {
    background: #1a1a1a !important;
    border: 1px solid #333 !important;
    border-radius: 12px !important;
    color: #fff !important;
    padding: 0 !important;
    width: 180px !important;
  }

  :global(.mapboxgl-popup-tip) {
    border-top-color: #1a1a1a !important;
  }

  .popup-content {
    padding: 0.8rem;
  }

  .popup-image {
    width: 100%;
    height: 60px;
    object-fit: cover;
    border-radius: 8px 8px 0 0;
  }

  .popup-title {
    font-size: 0.9rem;
    font-weight: bold;
    margin: 0.5rem 0;
    color: #fff;
    text-align: center;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .main-container {
      flex-direction: column;
    }
    
    .map-container {
      height: 40vh;
      order: 1;
    }
    
    .sidebar {
      height: 60vh;
      order: 2;
      width: 100%;
      border-right: none;
      border-top: 1px solid #333;
    }

    .search-bar {
      position: relative;
      top: 0;
      left: 0;
      margin: 0.5rem;
      width: calc(100% - 1rem);
      padding: 0.8rem;
    }

    .search-input {
      width: 140px;
      font-size: 0.8rem;
    }
    
    .search-btn {
      padding: 0.6rem 1rem;
      font-size: 0.9rem;
    }

    .map-controls {
      top: 10px;
      right: 10px;
      gap: 0.3rem;
    }

    .map-control-btn {
      padding: 0.6rem;
      font-size: 0.9rem;
    }
  }
</style>

<script is:inline define:vars={{ accommodationsData, MAPBOX_CONFIG }}>
// @ts-nocheck
(function() {
  // Variables globales
  let map;
  let markers = [];
  let currentCategory = 'hoteles';

  // Datos pasados desde el servidor
  console.log('accommodationsData:', accommodationsData);
  console.log('MAPBOX_CONFIG:', MAPBOX_CONFIG);

  // getAmenityIcon function (client-side) - Iconos hermosos y modernos
  function getAmenityIcon(iconType) {
    const iconMap = {
      'üë•': `<svg viewBox="0 0 32 32" fill="none" width="32" height="32">
        <defs>
          <linearGradient id="peopleGradC" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
          <filter id="peopleShadowC">
            <dropShadow dx="0" dy="2" stdDeviation="2" flood-color="#000" flood-opacity="0.3"/>
          </filter>
        </defs>
        <circle cx="10" cy="8" r="3" fill="url(#peopleGradC)" filter="url(#peopleShadowC)"/>
        <circle cx="22" cy="8" r="3" fill="url(#peopleGradC)" filter="url(#peopleShadowC)"/>
        <path d="M4 26v-4c0-3 3-5 6-5s6 2 6 5v4" stroke="url(#peopleGradC)" stroke-width="2.5" stroke-linecap="round" fill="none"/>
        <path d="M16 26v-4c0-3 3-5 6-5s6 2 6 5v4" stroke="url(#peopleGradC)" stroke-width="2.5" stroke-linecap="round" fill="none"/>
      </svg>`,
      'üì∂': `<svg viewBox="0 0 32 32" fill="none" width="32" height="32">
        <defs>
          <linearGradient id="wifiGradC" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#4facfe;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#00f2fe;stop-opacity:1" />
          </linearGradient>
        </defs>
        <path d="M4 14c6-6 18-6 24 0" stroke="url(#wifiGradC)" stroke-width="2.5" stroke-linecap="round" fill="none"/>
        <path d="M8 18c4-4 12-4 16 0" stroke="url(#wifiGradC)" stroke-width="2.5" stroke-linecap="round" fill="none"/>
        <path d="M12 22c2-2 6-2 8 0" stroke="url(#wifiGradC)" stroke-width="2.5" stroke-linecap="round" fill="none"/>
        <circle cx="16" cy="26" r="2" fill="url(#wifiGradC)"/>
      </svg>`,
      'üèä‚Äç‚ôÇÔ∏è': `<svg viewBox="0 0 32 32" fill="none" width="32" height="32">
        <defs>
          <linearGradient id="poolGradC" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#74b9ff;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#0984e3;stop-opacity:1" />
          </linearGradient>
        </defs>
        <rect x="3" y="12" width="26" height="12" rx="4" fill="url(#poolGradC)"/>
        <path d="M6 16h20" stroke="#81D4FA" stroke-width="1" opacity="0.7"/>
        <path d="M6 18h20" stroke="#81D4FA" stroke-width="1" opacity="0.5"/>
        <circle cx="10" cy="17" r="1.5" fill="#ffffff" opacity="0.8"/>
        <circle cx="22" cy="19" r="1" fill="#ffffff" opacity="0.6"/>
        <circle cx="16" cy="15" r="0.8" fill="#ffffff" opacity="0.7"/>
      </svg>`,
      'üÖøÔ∏è': `<svg viewBox="0 0 32 32" fill="none" width="32" height="32">
        <defs>
          <linearGradient id="carGradC" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#ff6b35;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#f7931e;stop-opacity:1" />
          </linearGradient>
        </defs>
        <rect x="4" y="10" width="24" height="14" rx="3" fill="url(#carGradC)"/>
        <circle cx="10" cy="22" r="3" fill="#2d3436"/>
        <circle cx="22" cy="22" r="3" fill="#2d3436"/>
        <text x="16" y="18" text-anchor="middle" fill="#fff" font-size="12" font-weight="bold">P</text>
      </svg>`,
      '‚òï': `<svg viewBox="0 0 32 32" fill="none" width="32" height="32">
        <defs>
          <linearGradient id="coffeeGradC" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#6c5ce7;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#5f3dc4;stop-opacity:1" />
          </linearGradient>
        </defs>
        <path d="M8 12h12v10c0 3-3 5-6 5s-6-2-6-5V12z" fill="#8d6e63"/>
        <path d="M8 12h12v8c0 2-2 3-4 3h-4c-2 0-4-1-4-3V12z" fill="url(#coffeeGradC)"/>
        <ellipse cx="14" cy="14" rx="4" ry="1.5" fill="#fdcb6e" opacity="0.9"/>
        <path d="M20 14h4c2 0 3 1 3 3s-1 3-3 3h-4" stroke="#8d6e63" stroke-width="2" fill="none"/>
      </svg>`
    };
    return iconMap[iconType] || `<svg viewBox="0 0 32 32" fill="currentColor" width="32" height="32"><circle cx="16" cy="16" r="6" fill="#0EA5E9"/></svg>`;
  }

  // Funci√≥n para esperar a que Mapbox se cargue
  function waitForMapbox() {
    return new Promise(function(resolve) {
      if (typeof mapboxgl !== 'undefined') {
        resolve();
      } else {
        const checkMapbox = setInterval(function() {
          if (typeof mapboxgl !== 'undefined') {
            clearInterval(checkMapbox);
            resolve();
          }
        }, 100);
        
        // Timeout despu√©s de 10 segundos
        setTimeout(function() {
          clearInterval(checkMapbox);
          console.error('Timeout waiting for Mapbox');
          resolve();
        }, 10000);
      }
    });
  }

  // Initialize when DOM loads
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, waiting for Mapbox...');
    
    waitForMapbox().then(function() {
      if (typeof mapboxgl !== 'undefined') {
        console.log('Mapbox loaded, initializing map...');
        initMap();
      } else {
        console.error('Mapbox failed to load');
        const mapContainer = document.getElementById('map');
        if (mapContainer) {
          mapContainer.innerHTML = '<div style="display:flex;align-items:center;justify-content:center;height:100%;color:#666;">Error cargando el mapa. Verifica tu conexi√≥n a internet.</div>';
        }
      }
    });
  });

  // Initialize map
  function initMap() {
    try {
      console.log('Initializing map with config:', MAPBOX_CONFIG);
      
      if (!MAPBOX_CONFIG || !MAPBOX_CONFIG.accessToken) {
        console.error('MAPBOX_CONFIG or accessToken not found');
        return;
      }
      
      mapboxgl.accessToken = MAPBOX_CONFIG.accessToken;
      
      const mapContainer = document.getElementById('map');
      if (!mapContainer) {
        console.error('Map container not found');
        return;
      }
      
      map = new mapboxgl.Map({
        container: 'map',
        style: MAPBOX_CONFIG.defaultStyle || 'mapbox://styles/mapbox/dark-v11',
        center: MAPBOX_CONFIG.defaultCenter || [-80.9553, -2.2108],
        zoom: MAPBOX_CONFIG.defaultZoom || 12,
        attributionControl: false
      });

      map.on('load', function() {
        console.log('Map loaded successfully');
        
        // Cargar datos iniciales
        loadAccommodations('hoteles');
        setupEventListeners();
        
        // Redimensionar mapa despu√©s de un momento
        setTimeout(function() {
          if (map) {
            map.resize();
          }
        }, 500);
      });

      map.on('error', function(e) {
        console.error('Map error:', e);
      });

      // Redimensionar mapa en cambio de ventana
      window.addEventListener('resize', function() {
        if (map) {
          setTimeout(function() {
            map.resize();
          }, 100);
        }
      });

    } catch (error) {
      console.error('Error initializing map:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
    // Filter tabs
    const filterTabs = document.querySelectorAll('.filter-tab');
    for (let i = 0; i < filterTabs.length; i++) {
      filterTabs[i].addEventListener('click', function() {
        // Remove active class from all tabs
        for (let j = 0; j < filterTabs.length; j++) {
          filterTabs[j].classList.remove('active');
        }
        
        // Add active class to clicked tab
        this.classList.add('active');
        
        const category = this.getAttribute('data-category');
        if (category) {
          currentCategory = category;
          loadAccommodations(category);
        }
      });
    }

    // Map controls
    const toggleBtn = document.getElementById('toggle-style');
    const centerBtn = document.getElementById('center-map');
    const searchBtn = document.querySelector('.search-btn');
    
    if (toggleBtn) {
      toggleBtn.addEventListener('click', toggleMapStyle);
    }
    
    if (centerBtn) {
      centerBtn.addEventListener('click', centerMap);
    }
    
    if (searchBtn) {
      searchBtn.addEventListener('click', function() {
        const searchInput = document.querySelector('.search-input');
        const query = searchInput ? searchInput.value.trim() : '';
        if (query) {
          console.log('Searching for:', query);
          // Aqu√≠ puedes implementar la funcionalidad de b√∫squeda
        }
      });
    }

    // Enter key para b√∫squeda
    const searchInput = document.querySelector('.search-input');
    if (searchInput) {
      searchInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          const query = e.target.value.trim();
          if (query) {
            console.log('Searching for:', query);
            // Implementar b√∫squeda
          }
        }
      });
    }
  }

  // Load accommodations
  function loadAccommodations(category) {
    console.log('Loading accommodations for category:', category);
    
    if (!accommodationsData || !accommodationsData[category]) {
      console.error('No data found for category:', category);
      const listContainer = document.getElementById('accommodation-list');
      if (listContainer) {
        listContainer.innerHTML = '<div class="loading">No hay datos disponibles</div>';
      }
      return;
    }
    
    const accommodations = accommodationsData[category];
    console.log('Found accommodations:', accommodations.length);
    
    updateAccommodationList(accommodations);
    updateMapMarkers(accommodations);
  }

  // Update accommodation list in sidebar
  function updateAccommodationList(accommodations) {
    const listContainer = document.getElementById('accommodation-list');
    
    if (!listContainer) {
      console.error('Accommodation list container not found');
      return;
    }
    
    if (accommodations.length === 0) {
      listContainer.innerHTML = '<div class="loading">No hay alojamientos disponibles</div>';
      return;
    }

    // Mapeo de iconos a descripciones
    const iconDescriptions = {
      'üë•': 'Capacidad de hu√©spedes',
      'üì∂': 'WiFi gratuito',
      'üèä‚Äç‚ôÇÔ∏è': 'Piscina',
      'üÖøÔ∏è': 'Parqueadero',
      'üåÖ': 'Vista al mar',
      'üç≥': 'Cocina equipada',
      'üèÑ‚Äç‚ôÇÔ∏è': 'Deportes acu√°ticos',
      'üß∫': 'Lavander√≠a',
      'üõÅ': 'Ba√±o privado',
      'üèãÔ∏è‚Äç‚ôÇÔ∏è': 'Gimnasio',
      '‚òï': 'Desayuno incluido'
    };

    const accommodationCards = accommodations.map(function(accommodation) {
      const amenityIcons = accommodation.amenities.map(function(amenity) {
        const description = iconDescriptions[amenity.icon] || 'Amenidad';
        // Iconos SVG directos
        let iconSvg = '';
        switch(amenity.icon) {
          case 'üë•':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><circle cx="10" cy="8" r="3" fill="#667eea"/><circle cx="22" cy="8" r="3" fill="#667eea"/><path d="M4 26v-4c0-3 3-5 6-5s6 2 6 5v4" stroke="#667eea" stroke-width="2.5" stroke-linecap="round" fill="none"/><path d="M16 26v-4c0-3 3-5 6-5s6 2 6 5v4" stroke="#667eea" stroke-width="2.5" stroke-linecap="round" fill="none"/></svg>';
            break;
          case 'üì∂':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><path d="M4 14c6-6 18-6 24 0" stroke="#4facfe" stroke-width="2.5" stroke-linecap="round" fill="none"/><path d="M8 18c4-4 12-4 16 0" stroke="#4facfe" stroke-width="2.5" stroke-linecap="round" fill="none"/><path d="M12 22c2-2 6-2 8 0" stroke="#4facfe" stroke-width="2.5" stroke-linecap="round" fill="none"/><circle cx="16" cy="26" r="2" fill="#4facfe"/></svg>';
            break;
          case 'üèä‚Äç‚ôÇÔ∏è':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><rect x="3" y="12" width="26" height="12" rx="4" fill="#74b9ff"/><path d="M6 16h20" stroke="#81D4FA" stroke-width="1" opacity="0.7"/><circle cx="10" cy="17" r="1.5" fill="#ffffff" opacity="0.8"/><circle cx="22" cy="19" r="1" fill="#ffffff" opacity="0.6"/></svg>';
            break;
          case 'üÖøÔ∏è':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><rect x="4" y="10" width="24" height="14" rx="3" fill="#ff6b35"/><circle cx="10" cy="22" r="3" fill="#2d3436"/><circle cx="22" cy="22" r="3" fill="#2d3436"/><text x="16" y="18" text-anchor="middle" fill="#fff" font-size="12" font-weight="bold">P</text></svg>';
            break;
          case 'üåÖ':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><circle cx="16" cy="10" r="4" fill="#fed65f"/><path d="M16 2v3M16 17v3M6.34 6.34l2.12 2.12M23.66 6.34l-2.12 2.12" stroke="#fed65f" stroke-width="2" stroke-linecap="round"/><rect x="2" y="20" width="28" height="8" fill="#74b9ff"/></svg>';
            break;
          case 'üç≥':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><rect x="4" y="8" width="24" height="16" rx="3" fill="#636e72"/><circle cx="12" cy="16" r="3" fill="#e84393"/><circle cx="20" cy="16" r="3" fill="#e84393"/></svg>';
            break;
          case 'üèÑ‚Äç‚ôÇÔ∏è':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><path d="M2 24c4-2 8 2 12 0s8-2 12 0v4H2z" fill="#74b9ff"/><rect x="12" y="8" width="8" height="16" rx="2" fill="#d63031"/><circle cx="16" cy="6" r="2.5" fill="#fdcb6e"/></svg>';
            break;
          case 'üß∫':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><rect x="6" y="8" width="20" height="18" rx="3" fill="#74b9ff"/><circle cx="16" cy="17" r="6" fill="none" stroke="#fff" stroke-width="2.5"/><circle cx="16" cy="17" r="3" fill="#ffffff" opacity="0.7"/></svg>';
            break;
          case 'üõÅ':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><ellipse cx="16" cy="18" rx="10" ry="4" fill="#74b9ff" opacity="0.7"/><circle cx="12" cy="17" r="0.8" fill="#ffffff" opacity="0.8"/><circle cx="20" cy="19" r="0.6" fill="#ffffff" opacity="0.6"/></svg>';
            break;
          case 'üèãÔ∏è‚Äç‚ôÇÔ∏è':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><rect x="4" y="15" width="24" height="2" rx="1" fill="#636e72"/><circle cx="6" cy="16" r="4" fill="#e17055"/><circle cx="26" cy="16" r="4" fill="#e17055"/></svg>';
            break;
          case '‚òï':
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><path d="M8 12h12v10c0 3-3 5-6 5s-6-2-6-5V12z" fill="#8d6e63"/><path d="M8 12h12v8c0 2-2 3-4 3h-4c-2 0-4-1-4-3V12z" fill="#6c5ce7"/><ellipse cx="14" cy="14" rx="4" ry="1.5" fill="#fdcb6e" opacity="0.9"/></svg>';
            break;
          default:
            iconSvg = '<svg viewBox="0 0 32 32" fill="none" width="32" height="32"><circle cx="16" cy="16" r="6" fill="#0EA5E9"/></svg>';
        }
        return `<div class="amenity-icon" title="${description}">
          ${iconSvg}
        </div>`;
      }).join('');

      return `
        <div class="accommodation-card" onclick="selectAccommodation(${accommodation.id}, true)">
          <img src="${accommodation.image}" alt="${accommodation.name}" class="card-image" loading="lazy">
          <div style="padding: 2rem 1.5rem; display: flex; flex-direction: column; align-items: center; justify-content: space-evenly; text-align: center; min-height: 280px; width: 100%; position: relative; z-index: 2;">
            <!-- Nombre del hotel centrado -->
            <div style="width: 100%; display: flex; justify-content: center; align-items: center; margin: 0; padding: 0;">
              <h3 style="font-size: 1.4rem; font-weight: 700; color: #fff; margin: 0 auto; text-align: center; line-height: 1.3; max-width: 100%; display: block; word-wrap: break-word; text-shadow: 0 2px 4px rgba(0,0,0,0.4);">${accommodation.name}</h3>
            </div>
            
            <!-- Iconos centrados en una fila horizontal -->
            <div style="display: flex; gap: 1.2rem; justify-content: center; align-items: center; margin: 0; flex-wrap: nowrap; width: 100%; overflow-x: auto; padding: 10px 0; scrollbar-width: none; -ms-overflow-style: none;">
              ${amenityIcons}
            </div>
            
            <!-- Bot√≥n naranja centrado -->
            <div style="width: 100%; display: flex; justify-content: center; align-items: center; margin: 0; padding: 0;">
              <button 
                onclick="event.stopPropagation(); window.open('https://wa.me/593123456789?text=Hola, estoy interesado en reservar ${accommodation.name}', '_blank')"
                style="
                  background: linear-gradient(145deg, #FF6B35 0%, #FF8A50 25%, #E55A2B 50%, #FF6B35 75%, #FF8A50 100%) !important;
                  background-size: 200% 200% !important;
                  color: white !important;
                  border: none !important;
                  padding: 16px 32px !important;
                  border-radius: 50px !important;
                  font-weight: 800 !important;
                  font-size: 0.9rem !important;
                  cursor: pointer !important;
                  text-transform: uppercase !important;
                  letter-spacing: 1.5px !important;
                  box-shadow: 0 10px 30px rgba(255, 107, 53, 0.5), 0 5px 15px rgba(255, 107, 53, 0.3), inset 0 2px 0 rgba(255,255,255,0.4), inset 0 -2px 0 rgba(0,0,0,0.1) !important;
                  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) !important;
                  min-width: 160px !important;
                  position: relative !important;
                  overflow: hidden !important;
                  text-shadow: 0 2px 4px rgba(0,0,0,0.3) !important;
                "
              >RESERVAR</button>
            </div>
          </div>
        </div>
      `;
    }).join('');

    listContainer.innerHTML = accommodationCards;
  }

  // Update map markers
  function updateMapMarkers(accommodations) {
    if (!map) {
      console.error('Map not initialized');
      return;
    }

    // Remover marcadores existentes
    for (let i = 0; i < markers.length; i++) {
      markers[i].remove();
    }
    markers = [];

    for (let i = 0; i < accommodations.length; i++) {
      const accommodation = accommodations[i];
      const markerColor = currentCategory === 'hoteles' ? '#FF6B35' : 
                        currentCategory === 'departamentos' ? '#0EA5E9' : '#10B981';

      try {
        const popupAmenities = accommodation.amenities.slice(0, 2).map(function(amenity) {
          return `<span>${getAmenityIcon(amenity.icon)}</span>`;
        }).join('');

        const marker = new mapboxgl.Marker({ color: markerColor })
          .setLngLat(accommodation.coordinates)
          .setPopup(
            new mapboxgl.Popup({ offset: 25 })
              .setHTML(`
                <div class="popup-content">
                  <img src="${accommodation.image}" alt="${accommodation.name}" class="popup-image">
                  <h3 class="popup-title">${accommodation.name}</h3>
                </div>
              `)
          )
          .addTo(map);

        markers.push(marker);
      } catch (error) {
        console.error('Error creating marker for accommodation:', accommodation.name, error);
      }
    }

    // Ajustar vista del mapa para mostrar todos los marcadores
    if (accommodations.length > 0) {
      try {
        const bounds = new mapboxgl.LngLatBounds();
        for (let i = 0; i < accommodations.length; i++) {
          bounds.extend(accommodations[i].coordinates);
        }
        map.fitBounds(bounds, { padding: 50 });
      } catch (error) {
        console.error('Error fitting bounds:', error);
      }
    }
  }

  // Select accommodation
  function selectAccommodation(id, autoFocus) {
    autoFocus = autoFocus || false;
    
    const allAccommodations = []
      .concat(accommodationsData.hoteles || [])
      .concat(accommodationsData.departamentos || [])
      .concat(accommodationsData.hostales || []);
    
    let accommodation = null;
    for (let i = 0; i < allAccommodations.length; i++) {
      if (allAccommodations[i].id === id) {
        accommodation = allAccommodations[i];
        break;
      }
    }
    
    if (accommodation && map) {
      if (autoFocus) {
        // Scroll to map section
        const mapSection = document.querySelector('#mapa');
        if (mapSection) {
          mapSection.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
        
        // Fly to location after scroll
        setTimeout(function() {
          map.flyTo({
            center: accommodation.coordinates,
            zoom: 16,
            duration: 2500,
            essential: true
          });
        }, 800);
      } else {
        map.flyTo({
          center: accommodation.coordinates,
          zoom: 16,
          duration: 2000
        });
      }
      
      // Show popup
      setTimeout(function() {
        for (let i = 0; i < markers.length; i++) {
          const marker = markers[i];
          const lngLat = marker.getLngLat();
          if (Math.abs(lngLat.lng - accommodation.coordinates[0]) < 0.001 && 
              Math.abs(lngLat.lat - accommodation.coordinates[1]) < 0.001) {
            const popup = marker.getPopup();
            if (popup) {
              popup.addTo(map);
            }
            break;
          }
        }
      }, autoFocus ? 3000 : 2000);
    }
  }

  // Map controls
  function toggleMapStyle() {
    if (!map) return;
    
    try {
      const currentStyle = map.getStyle().name;
      const newStyle = currentStyle === 'Mapbox Dark' ? 
        'mapbox://styles/mapbox/streets-v12' : 
        'mapbox://styles/mapbox/dark-v11';
      map.setStyle(newStyle);
    } catch (error) {
      console.error('Error toggling map style:', error);
    }
  }

  function centerMap() {
    if (!map || !accommodationsData[currentCategory]) return;
    
    const accommodations = accommodationsData[currentCategory];
    if (accommodations.length > 0) {
      try {
        const bounds = new mapboxgl.LngLatBounds();
        for (let i = 0; i < accommodations.length; i++) {
          bounds.extend(accommodations[i].coordinates);
        }
        map.fitBounds(bounds, { padding: 50 });
      } catch (error) {
        console.error('Error centering map:', error);
      }
    }
  }

  // Get directions function
  function getDirections(lng, lat) {
    const googleMapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}&travelmode=driving`;
    window.open(googleMapsUrl, '_blank');
  }

  // Make functions global so they can be called from HTML
  window.selectAccommodation = selectAccommodation;
  window.toggleMapStyle = toggleMapStyle;
  window.centerMap = centerMap;
  window.getDirections = getDirections;

})();
</script>